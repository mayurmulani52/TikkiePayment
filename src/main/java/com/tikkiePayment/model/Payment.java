/*
 * Tikkie Payment Integration APIs
 * This is an integration APIs with Tikkie Payment gateway
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.tikkiepayment.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

import org.threeten.bp.OffsetDateTime;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Payment
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-10-05T18:33:16.985Z[GMT]")
public class Payment {
  @SerializedName("paymentToken")
  private UUID paymentToken = null;

  @SerializedName("tikkieId")
  private String tikkieId = null;

  @SerializedName("counterPartyName")
  private String counterPartyName = null;

  @SerializedName("counterPartyAccountNumber")
  private String counterPartyAccountNumber = null;

  @SerializedName("amountInCents")
  private Integer amountInCents = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("createdDateTime")
  private OffsetDateTime createdDateTime = null;

  @SerializedName("refunds")
  private List<Refund> refunds = null;

  public Payment paymentToken(UUID paymentToken) {
    this.paymentToken = paymentToken;
    return this;
  }

   /**
   * Unique token identifying this payment.
   * @return paymentToken
  **/
  @Schema(example = "21ef7413-cc3c-4c80-9272-6710fada28e4", description = "Unique token identifying this payment.")
  public UUID getPaymentToken() {
    return paymentToken;
  }

  public void setPaymentToken(UUID paymentToken) {
    this.paymentToken = paymentToken;
  }

  public Payment tikkieId(String tikkieId) {
    this.tikkieId = tikkieId;
    return this;
  }

   /**
   * Unique ID identifying this payment. This will be displayed on the payers statement.
   * @return tikkieId
  **/
  @Schema(example = "000012345678", description = "Unique ID identifying this payment. This will be displayed on the payers statement.")
  public String getTikkieId() {
    return tikkieId;
  }

  public void setTikkieId(String tikkieId) {
    this.tikkieId = tikkieId;
  }

  public Payment counterPartyName(String counterPartyName) {
    this.counterPartyName = counterPartyName;
    return this;
  }

   /**
   * Name of the payer.
   * @return counterPartyName
  **/
  @Schema(example = "E. Xample", description = "Name of the payer.")
  public String getCounterPartyName() {
    return counterPartyName;
  }

  public void setCounterPartyName(String counterPartyName) {
    this.counterPartyName = counterPartyName;
  }

  public Payment counterPartyAccountNumber(String counterPartyAccountNumber) {
    this.counterPartyAccountNumber = counterPartyAccountNumber;
    return this;
  }

   /**
   * IBAN of the payer.
   * @return counterPartyAccountNumber
  **/
  @Schema(example = "NL01ABNA1234567890", description = "IBAN of the payer.")
  public String getCounterPartyAccountNumber() {
    return counterPartyAccountNumber;
  }

  public void setCounterPartyAccountNumber(String counterPartyAccountNumber) {
    this.counterPartyAccountNumber = counterPartyAccountNumber;
  }

  public Payment amountInCents(Integer amountInCents) {
    this.amountInCents = amountInCents;
    return this;
  }

   /**
   * Amount, in cents, which was paid (euros).
   * @return amountInCents
  **/
  @Schema(example = "1500", description = "Amount, in cents, which was paid (euros).")
  public Integer getAmountInCents() {
    return amountInCents;
  }

  public void setAmountInCents(Integer amountInCents) {
    this.amountInCents = amountInCents;
  }

  public Payment description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the payment request, which the payer or payers will see.
   * @return description
  **/
  @Schema(example = "Invoice 1815", description = "Description of the payment request, which the payer or payers will see.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Payment createdDateTime(OffsetDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
    return this;
  }

   /**
   * Timestamp when the payment was created. Format: YYYY-MM-DD:HH:mm:ss.SSSZ.
   * @return createdDateTime
  **/
  @Schema(example = "2019-09-09T12:34:56Z", description = "Timestamp when the payment was created. Format: YYYY-MM-DD:HH:mm:ss.SSSZ.")
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }

  public void setCreatedDateTime(OffsetDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
  }

  public Payment refunds(List<Refund> refunds) {
    this.refunds = refunds;
    return this;
  }

  public Payment addRefundsItem(Refund refundsItem) {
    if (this.refunds == null) {
      this.refunds = new ArrayList<Refund>();
    }
    this.refunds.add(refundsItem);
    return this;
  }

   /**
   * List of refunds performed on this payment.
   * @return refunds
  **/
  @Schema(description = "List of refunds performed on this payment.")
  public List<Refund> getRefunds() {
    return refunds;
  }

  public void setRefunds(List<Refund> refunds) {
    this.refunds = refunds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payment payment = (Payment) o;
    return Objects.equals(this.paymentToken, payment.paymentToken) &&
        Objects.equals(this.tikkieId, payment.tikkieId) &&
        Objects.equals(this.counterPartyName, payment.counterPartyName) &&
        Objects.equals(this.counterPartyAccountNumber, payment.counterPartyAccountNumber) &&
        Objects.equals(this.amountInCents, payment.amountInCents) &&
        Objects.equals(this.description, payment.description) &&
        Objects.equals(this.createdDateTime, payment.createdDateTime) &&
        Objects.equals(this.refunds, payment.refunds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentToken, tikkieId, counterPartyName, counterPartyAccountNumber, amountInCents, description, createdDateTime, refunds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payment {\n");
    
    sb.append("    paymentToken: ").append(toIndentedString(paymentToken)).append("\n");
    sb.append("    tikkieId: ").append(toIndentedString(tikkieId)).append("\n");
    sb.append("    counterPartyName: ").append(toIndentedString(counterPartyName)).append("\n");
    sb.append("    counterPartyAccountNumber: ").append(toIndentedString(counterPartyAccountNumber)).append("\n");
    sb.append("    amountInCents: ").append(toIndentedString(amountInCents)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
