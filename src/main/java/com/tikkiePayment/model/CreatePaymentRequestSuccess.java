/*
 * Tikkie Payment Integration APIs
 * This is an integration APIs with Tikkie Payment gateway
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.tikkiepayment.model;

import java.io.IOException;
import java.util.Objects;

import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * CreatePaymentRequestSuccess
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-10-05T18:33:16.985Z[GMT]")
public class CreatePaymentRequestSuccess {
  @SerializedName("paymentRequestToken")
  private String paymentRequestToken = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("amountInCents")
  private Integer amountInCents = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("referenceId")
  private String referenceId = null;

  @SerializedName("createdDateTime")
  private OffsetDateTime createdDateTime = null;

  @SerializedName("expiryDate")
  private LocalDate expiryDate = null;

  /**
   * Status of the payment request  Status description:   ---   - OPEN     &gt; A payment request is open and ready to be paid.   - CLOSED     &gt; A payment request is closed.   - EXPIRED     &gt; A payment request has expired.   - MAX_YIELD_REACHED     &gt; The payment request has reached its maximum amount in euro. This limit is dependent on the maximum agreed amount.   - MAX_SUCCESSFUL_PAYMENTS_REACHED     &gt; The payment request has reached its maximum amount of payments. The maximum amount of payments per request can be either set to one or unlimited. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OPEN("OPEN"),
    CLOSED("CLOSED"),
    EXPIRED("EXPIRED"),
    MAX_YIELD_REACHED("MAX_YIELD_REACHED"),
    MAX_SUCCESSFUL_PAYMENTS_REACHED("MAX_SUCCESSFUL_PAYMENTS_REACHED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  public CreatePaymentRequestSuccess paymentRequestToken(String paymentRequestToken) {
    this.paymentRequestToken = paymentRequestToken;
    return this;
  }

   /**
   * Unique token identifying this payment request, which is later used when retrieving details.
   * @return paymentRequestToken
  **/
  @Schema(example = "qzdnzr8hnVWTgXXcFRLUMc", description = "Unique token identifying this payment request, which is later used when retrieving details.")
  public String getPaymentRequestToken() {
    return paymentRequestToken;
  }

  public void setPaymentRequestToken(String paymentRequestToken) {
    this.paymentRequestToken = paymentRequestToken;
  }

  public CreatePaymentRequestSuccess url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL where the payment request can be paid.
   * @return url
  **/
  @Schema(example = "https://tikkie.me/pay/Tikkie/qzdnzr8hnVWTgXXcFRLUMc", description = "URL where the payment request can be paid.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public CreatePaymentRequestSuccess amountInCents(Integer amountInCents) {
    this.amountInCents = amountInCents;
    return this;
  }

   /**
   * Amount in cents to be paid (euros).
   * @return amountInCents
  **/
  @Schema(example = "1500", description = "Amount in cents to be paid (euros).")
  public Integer getAmountInCents() {
    return amountInCents;
  }

  public void setAmountInCents(Integer amountInCents) {
    this.amountInCents = amountInCents;
  }

  public CreatePaymentRequestSuccess description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the payment request, which the payer or payers will see.
   * @return description
  **/
  @Schema(example = "Invoice 1815", description = "Description of the payment request, which the payer or payers will see.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreatePaymentRequestSuccess referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

   /**
   * ID for the reference of the API consumer.
   * @return referenceId
  **/
  @Schema(example = "inv_1815", description = "ID for the reference of the API consumer.")
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }

  public CreatePaymentRequestSuccess createdDateTime(OffsetDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
    return this;
  }

   /**
   * Timestamp when the payment request was created. Format: YYYY-MM-DD:HH:mm:ss.SSSZ.
   * @return createdDateTime
  **/
  @Schema(example = "2019-09-09T12:34:56Z", description = "Timestamp when the payment request was created. Format: YYYY-MM-DD:HH:mm:ss.SSSZ.")
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }

  public void setCreatedDateTime(OffsetDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
  }

  public CreatePaymentRequestSuccess expiryDate(LocalDate expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Date after the payment request will expire. Format: YYYY-MM-DD.
   * @return expiryDate
  **/
  @Schema(example = "Tue Mar 03 00:00:00 GMT 2020", description = "Date after the payment request will expire. Format: YYYY-MM-DD.")
  public LocalDate getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(LocalDate expiryDate) {
    this.expiryDate = expiryDate;
  }

  public CreatePaymentRequestSuccess status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the payment request  Status description:   ---   - OPEN     &gt; A payment request is open and ready to be paid.   - CLOSED     &gt; A payment request is closed.   - EXPIRED     &gt; A payment request has expired.   - MAX_YIELD_REACHED     &gt; The payment request has reached its maximum amount in euro. This limit is dependent on the maximum agreed amount.   - MAX_SUCCESSFUL_PAYMENTS_REACHED     &gt; The payment request has reached its maximum amount of payments. The maximum amount of payments per request can be either set to one or unlimited. 
   * @return status
  **/
  @Schema(example = "OPEN", description = "Status of the payment request  Status description:   ---   - OPEN     > A payment request is open and ready to be paid.   - CLOSED     > A payment request is closed.   - EXPIRED     > A payment request has expired.   - MAX_YIELD_REACHED     > The payment request has reached its maximum amount in euro. This limit is dependent on the maximum agreed amount.   - MAX_SUCCESSFUL_PAYMENTS_REACHED     > The payment request has reached its maximum amount of payments. The maximum amount of payments per request can be either set to one or unlimited. ")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestSuccess createPaymentRequestSuccess = (CreatePaymentRequestSuccess) o;
    return Objects.equals(this.paymentRequestToken, createPaymentRequestSuccess.paymentRequestToken) &&
        Objects.equals(this.url, createPaymentRequestSuccess.url) &&
        Objects.equals(this.amountInCents, createPaymentRequestSuccess.amountInCents) &&
        Objects.equals(this.description, createPaymentRequestSuccess.description) &&
        Objects.equals(this.referenceId, createPaymentRequestSuccess.referenceId) &&
        Objects.equals(this.createdDateTime, createPaymentRequestSuccess.createdDateTime) &&
        Objects.equals(this.expiryDate, createPaymentRequestSuccess.expiryDate) &&
        Objects.equals(this.status, createPaymentRequestSuccess.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentRequestToken, url, amountInCents, description, referenceId, createdDateTime, expiryDate, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestSuccess {\n");
    
    sb.append("    paymentRequestToken: ").append(toIndentedString(paymentRequestToken)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    amountInCents: ").append(toIndentedString(amountInCents)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
