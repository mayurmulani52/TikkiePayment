/*
 * Tikkie Payment Integration APIs
 * This is an integration APIs with Tikkie Payment gateway
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.tikkiepayment.model;

import java.io.IOException;
import java.util.Date;
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * PaymentRequsetResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-10-05T18:33:16.985Z[GMT]")
public class PaymentRequestResponse {
  @SerializedName("email")
  private String email = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("referenceId")
  private String referenceId = null;

  @SerializedName("paymentReferenceToken")
  private String paymentReferenceToken = null;

  @SerializedName("amountInCents")
  private Integer amountInCents = null;

  @SerializedName("paymentURL")
  private String paymentURL = null;

  /**
   * Gets or Sets paymentType
   */
  @JsonAdapter(PaymentTypeEnum.Adapter.class)
  public enum PaymentTypeEnum {
    SUCCESSFUL("SUCCESSFUL"),
    ERROR("ERROR");

    private String value;

    PaymentTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PaymentTypeEnum fromValue(String text) {
      for (PaymentTypeEnum b : PaymentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PaymentTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("paymentType")
  private PaymentTypeEnum paymentType = null;

  @SerializedName("createdDateTime")
  private Date createdDateTime = null;

  @SerializedName("expiryDate")
  private String expiryDate = null;

  /**
   * Status of the payment request   
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OPEN("OPEN"),
    CLOSED("CLOSED"),
    EXPIRED("EXPIRED"),
    MAX_YIELD_REACHED("MAX_YIELD_REACHED"),
    MAX_SUCCESSFUL_PAYMENTS_REACHED("MAX_SUCCESSFUL_PAYMENTS_REACHED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  public PaymentRequestResponse email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(description = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public PaymentRequestResponse description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PaymentRequestResponse referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

   /**
   * Get referenceId
   * @return referenceId
  **/
  @Schema(description = "")
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }

  public PaymentRequestResponse paymentReferenceToken(String paymentReferenceToken) {
    this.paymentReferenceToken = paymentReferenceToken;
    return this;
  }

   /**
   * Get paymentReferenceToken
   * @return paymentReferenceToken
  **/
  @Schema(description = "")
  public String getPaymentReferenceToken() {
    return paymentReferenceToken;
  }

  public void setPaymentReferenceToken(String paymentReferenceToken) {
    this.paymentReferenceToken = paymentReferenceToken;
  }

  public PaymentRequestResponse amountInCents(Integer amountInCents) {
    this.amountInCents = amountInCents;
    return this;
  }

   /**
   * Get amountInCents
   * @return amountInCents
  **/
  @Schema(description = "")
  public Integer getAmountInCents() {
    return amountInCents;
  }

  public void setAmountInCents(Integer amountInCents) {
    this.amountInCents = amountInCents;
  }

  public PaymentRequestResponse paymentURL(String paymentURL) {
    this.paymentURL = paymentURL;
    return this;
  }

   /**
   * Get paymentURL
   * @return paymentURL
  **/
  @Schema(description = "")
  public String getPaymentURL() {
    return paymentURL;
  }

  public void setPaymentURL(String paymentURL) {
    this.paymentURL = paymentURL;
  }

  public PaymentRequestResponse paymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Get paymentType
   * @return paymentType
  **/
  @Schema(description = "")
  public PaymentTypeEnum getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
  }

  public PaymentRequestResponse createdDateTime(Date createdDateTime) {
    this.createdDateTime = createdDateTime;
    return this;
  }

   /**
   * Timestamp when the payment request was created. Format: YYYY-MM-DD:HH:mm:ss.SSSZ.
   * @return createdDateTime
  **/
  @Schema(example = "2019-09-09T12:34:56Z", description = "Timestamp when the payment request was created. Format: YYYY-MM-DD:HH:mm:ss.SSSZ.")
  public Date getCreatedDateTime() {
    return createdDateTime;
  }

  public void setCreatedDateTime(Date createdDateTime) {
    this.createdDateTime = createdDateTime;
  }

  public PaymentRequestResponse expiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Date after the payment request will expire. Format: YYYY-MM-DD.
   * @return expiryDate
  **/
  @Schema(example = "Tue Mar 03 00:00:00 GMT 2020", description = "Date after the payment request will expire. Format: YYYY-MM-DD.")
  public String getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
  }

  public PaymentRequestResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the payment request   
   * @return status
  **/
  @Schema(description = "Status of the payment request   ")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentRequestResponse paymentRequsetResponse = (PaymentRequestResponse) o;
    return Objects.equals(this.email, paymentRequsetResponse.email) &&
        Objects.equals(this.description, paymentRequsetResponse.description) &&
        Objects.equals(this.referenceId, paymentRequsetResponse.referenceId) &&
        Objects.equals(this.paymentReferenceToken, paymentRequsetResponse.paymentReferenceToken) &&
        Objects.equals(this.amountInCents, paymentRequsetResponse.amountInCents) &&
        Objects.equals(this.paymentURL, paymentRequsetResponse.paymentURL) &&
        Objects.equals(this.paymentType, paymentRequsetResponse.paymentType) &&
        Objects.equals(this.createdDateTime, paymentRequsetResponse.createdDateTime) &&
        Objects.equals(this.expiryDate, paymentRequsetResponse.expiryDate) &&
        Objects.equals(this.status, paymentRequsetResponse.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, description, referenceId, paymentReferenceToken, amountInCents, paymentURL, paymentType, createdDateTime, expiryDate, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentRequsetResponse {\n");
    
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    paymentReferenceToken: ").append(toIndentedString(paymentReferenceToken)).append("\n");
    sb.append("    amountInCents: ").append(toIndentedString(amountInCents)).append("\n");
    sb.append("    paymentURL: ").append(toIndentedString(paymentURL)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
